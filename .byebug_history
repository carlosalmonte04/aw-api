exit
c
final_json
c
final_json
c
final_json
n
c
final_json[row[pk_index]]
headers
final_json
row_cells
c
row_cells
n
c
final_json
exit
c
row_cells[pk_index]
row_cells
row
c
rows
row
row_cells
c
final_json
rows
row
c
csv_params
c
params
c
params
c
params
c
params
csv_params
c
C
csv_params
c
csv_params
c
params
csv_params
c
csv_params
c
params
csv_params
params
selected_format
selected_option
exit
c
j
headers.length - 1
headers
cell
c
headers.length
j
c
j
c
j === headers.length - 1
j
ls
i == rows.length - 1
j
c
j
c
j
headers.length
headers
c
headers
pk_index
j
cell
n
cell
n
j
pk_index
cell
row
c
row
n
row.split(",")
row
c
pk_index   = headers.index(csv_params[:pk] || headers[0])
c
csv_params[:pk]
headers
c
headers
rows
c
csv_params[:file_to_parse].split("\r\n")
csv_params
csv_parms
rows
c
csv_params
params
c
csv_params
c
params
csv_params
params
c
params
csv_params
params
c
render :template => "reports/pdf"
render :"reports/pdf.html.erb"
c
render :file => "#{Rails.root}/app/views/reports/pdf.html.erb"
c
render :template => "#{Rails.root}/app/views/reports/pdf.html.erb"
c
render "#{Rails.root}/app/views/reports/pdf.html.erb"
"#{Rails.root}/app/views/reports/pdf"
c
render :template => 'reports/pdf'
    html = ac.render_to_string :template => 'reports/pdf'
    ac = ActionController::Base.new()
    html = ac.render_to_string :template => 'reports/pdf', :locals => {rows: rows}
    ac = ActionController::Base.new()
c
render template: 'reports/pdf'
c
;2Dc
render template: 'reports/pdf'
render 'reports/pdf'
c
n
c
n
html
n
c
cell
n
cell
n
row
n
exit
cell
n
cell
n
c
cell
n
cell
n
cell
n
row
n
row.split(",")
row.split("m")
rows
row
cell
row
n
rows
c
html
rows
    html = ac.render_to_string :template => 'reports/pdf', :locals => {rows: rows}
    ac = ActionController::Base.new()
c
rows
c
    html = ac.render_to_string :template => 'reports/pdf', :locals => {rows: rows}
    ac = ActionController::Base.new()
c
n
c
n
c
ac.render_to_string :template => 'reports/pdf'
ac = ActionController::Base.new()
render_to_string :file => "reports/pdf_layout"
render_to_string :template => "reports/pdf_layout"
render_to_string(:action => "pdf_layout", :layout => false)
render_to_string(:layout => "pdf_layout", :layout => false)
render_to_string(:layout => "pdf_layout")
render_to_string file: "#{Rails.root}/views/layouts/pdf_layout.html.erb"
render_to_string "#{Rails.root}/views/layouts/pdf_layout.html.erb"
"#{Rails.root}/views/layouts/pdf_layout.html.erb"
"#{Rails.root}/views/layouts"/pdf_layout.html.erb
"#{Rails.root}/views/layouts"
Rails.root
render_to_string '../../../views/layouts/pdf_layout.html.erb'
render_to_string '/views/layouts/pdf_layout.html.erb'
c
render_to_string '/views/layouts/pdf_layout.html.erb'
render_to_string 'app/views/layouts/pdf_layout.html.erb'
render_to_string '../../../views/layouts/pdf_layout.html.erb'
render_to_string '../../../layouts/pdf_layout.html.erb'
render_to_string '/layouts/pdf_layout.html.erb'
render_to_string 'layouts/pdf_layout.html.erb'
render_to_string
render template: "invoices/pdf", layout: "invoice_pdf", locals: { invoice: invoice }
c
render template: 'pdf_layout'
render template: 'pdf_layout.html.erb'
render template: pdf_layout.html.erb
"#{params}"
`#{params}`
csv_params[:csv].split("\r\n")[0].split(",")
csv_params[:csv].split("\r\n")[0]
c
csv_params[:csv].split("\r\n")[0].split(",")
csv_params[:csv].split("\r\n")[0]
csv_params[:csv].split("\r\n")csv_params[:csv].split("\r\n")[0]
csv_params[:csv].split("\r\n")
csv_params[:csv]
csv_params
params
csv_params
c
params
csv_params
c
params.require(:csv_parser).permic
params.require(:csv_parser)
params.require(:csv)
params.require(:csv).permit(:name, :data)
params[:csv]
params
csv_params
c
csv_params
params
c
params
c
params
c
